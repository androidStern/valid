// Generated by CoffeeScript 1.7.1
(function() {
  var Checker, R, Validator, mustBeArray, mustBeFunction, mustBeMap, mustBeString, typeCheck,
    __slice = [].slice;

  R = require('ramda');

  typeCheck = R.curry(require('type-check').typeCheck, 2);

  Validator = function(message, fn) {
    return {
      message: message,
      fn: fn
    };
  };

  Checker = R.curry(function(validators, fn) {
    var origional_fn;
    origional_fn = fn;
    return function() {
      var args, err_message, errors, reducer;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      reducer = function(acc, validator) {
        var message;
        fn = validator.fn, message = validator.message;
        if (message == null) {
          message = "FAILED but no error message available";
        }
        if (fn.call(null, args[0])) {
          return acc;
        } else {
          return R.cons(message, acc);
        }
      };
      errors = R.reduce(reducer, [], validators);
      if (errors.length > 0) {
        err_message = errors.join(", ");
        throw new Error(err_message);
      }
      return origional_fn.apply(null, args);
    };
  });

  mustBeMap = Checker([Validator("Argument must be a map", typeCheck("Object"))]);

  mustBeArray = Checker([Validator("Argument must be an array", typeCheck("Array"))]);

  mustBeFunction = Checker([Validator("Argument must be a funtion", typeCheck("Function"))]);

  mustBeString = Checker([Validator("Argument must be a string", typeCheck("String"))]);

  module.exports = {
    Validator: Validator,
    Checker: Checker,
    mustBeMap: mustBeMap,
    mustBeArray: mustBeArray,
    mustBeFunction: mustBeFunction,
    mustBeString: mustBeString
  };

}).call(this);
